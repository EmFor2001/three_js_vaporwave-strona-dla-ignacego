import {
  Canvas,
  useFrame,
  useThree,
  useLoader,
  extend,
} from "@react-three/fiber";
import { PerspectiveCamera, OrbitControls } from "@react-three/drei";
import Head from "next/head";
import React from "react";
import { TextureLoader } from "three/src/loaders/TextureLoader";
import {
  EffectComposer,
  GammaCorrectionShader,
  RGBShiftShader,
  RenderPass,
  ShaderPass,
} from "three-stdlib";

extend({ EffectComposer, RenderPass, ShaderPass });

const Terrain = React.forwardRef((props, ref) => {
  const { z } = props;

  const [gridTexture, heightTexture, metalnessTexture] = useLoader(
    TextureLoader,
    ["grid-6.png", "displacement-7.png", "metalness-2.png"]
  );

  return (
    <mesh ref={ref} position={[0, 0, z]} rotation={[-Math.PI * 0.5, 0, 0]}>
      <planeGeometry args={[1, 2, 24, 24]} />
      <meshStandardMaterial
        map={gridTexture}
        displacementMap={heightTexture}
        displacementScale={0.4}
        metalnessMap={metalnessTexture}
        metalness={0.96}
        roughness={0.5}
      />
    </mesh>
  );
});

Terrain.displayName = "Terrain";

const MovingLandscape = () => {
  const terrain1Ref = React.useRef();
  const terrain2Ref = React.useRef();

  const spotlight1Ref = React.useRef();
  const spotlight2Ref = React.useRef();

  spotlight1Ref.current?.target.position.set([-0.25, 0.25, 0.25]);
  spotlight2Ref.current?.target.position.set([0.25, 0.25, 0.25]);

  useFrame((state) => {
    // Update plane position
    terrain1Ref.current.position.z = (state.clock.elapsedTime * 0.15) % 2;
    terrain2Ref.current.position.z = ((state.clock.elapsedTime * 0.15) % 2) - 2;
  });

  return (
    <>
      <spotLight
        ref={spotlight1Ref}
        color="#d53c3d"
        intensity={40}
        position={[0.5, 0.75, 2.1]}
        distance={25}
        angle={Math.PI * 0.1}
        penumbra={0.25}
        decay={10}
      />
      <spotLight
        ref={spotlight2Ref}
        color="#d53c3d"
        intensity={40}
        position={[-0.5, 0.75, 2.1]}
        distance={25}
        angle={Math.PI * 0.1}
        penumbra={0.25}
        decay={10}
      />
      <Terrain ref={terrain1Ref} z={0} />
      <Terrain ref={terrain2Ref} z={-2} />
    </>
  );
};

const Effects = () => {
  const composerRef = React.useRef();
  const rgbShiftRef = React.useRef();
  const { gl, scene, camera, size } = useThree();

  React.useEffect(() => {
    composerRef?.current.setSize(size.width, size.height);
  }, [size]);

  useFrame(() => {
    if (rgbShiftRef.current) {
      rgbShiftRef.current.uniforms["amount"].value = 0.002;
    }

    composerRef.current.render();
  }, 1);

  return (
    <effectComposer ref={composerRef} args={[gl]}>
      <renderPass attachArray="passes" args={[scene, camera]} />
      <shaderPass
        ref={rgbShiftRef}
        attachArray="passes"
        args={[RGBShiftShader]}
        renderToScreen
      />
      <shaderPass attachArray="passes" args={[GammaCorrectionShader]} />
    </effectComposer>
  );
};

const Scene = () => {
  const [mounted, setMounted] = React.useState(false);

  React.useEffect(() => {
    setMounted(true);
  }, []);

  return (
    <>
      {!mounted ? null : (
        <Canvas
          style={{
            position: "absolute",
            display: "block",
            top: 0,
            left: 0,
            zIndex: -1,
            outline: "none",
          }}
          linear
          dpr={window.devicePixelRatio}
        >
          <React.Suspense fallback={null}>
            <color attach="background" args={["#000000"]} />
            <fog attach="fog" args={["#000000", 1, 2.5]} />
            <OrbitControls attach="orbitControls" />
            <PerspectiveCamera
              makeDefault
              position={[0, 0.06, 1.1]}
              fov={75}
              near={0.01}
              far={20}
            />
            <MovingLandscape />
            <Effects />
          </React.Suspense>
        </Canvas>
      )}
    </>
  );
};

export default function Home() {
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Scene />
    </div>
  );
}
